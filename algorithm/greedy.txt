### 탐욕법

- 개념
각 단계마다 지금 당장의 가장 좋은 방법을 선택한다.

- 의문
이렇게 하면 답이 나올까?
- 답변
아니다. 따라서 탐욕법을 사용해야 하는 경우는 따로 있다.

- 탐욕법을 사용해야 하는 경우
탐욕법을 사용해도 항상 최적해를 구할 수 있는 문제에서 사용해야 한다. dp보다 수행시간이 훨씬 빠르다.

- 주의
알고리즘의 "정당성"을 증명하는 과정을 빼먹지 않고 연습해야 한다.

- 정당성을 위해 증명해야 할 속성
1. 탐욕적 선택 속성(greedy choice property)
dp처럼 답의 모든 부분을 고려하지 않고 탐욕적으로만 선택하더라도 최적해를 구할 수 있다는 속성
즉, 탐욕적 선택으로 인해 손해볼 일이 없다는 것을 증명해야.

2. 최적 부분 구조(optimal substructure)
dp를 다룰 때처럼 부분 문제의 최적해에서 전체 문제의 최적해를 만들 수 있다는 것을 증명해야.
<많은 경우 자명하다.>

- 구현
특정 조건으로 객체들을 정렬하면 구현이 쉬워지는 경우가 많다.

- 레시피
1. 문제의 답을 만드는 과정을 여러 조각으로 나눈다

2-1. 각 조각마다 어떤 우선순위로 선택을 내려야 할지 결정한다.
2-2. 이에 대한 직관을 얻기 위해 예제 입력 등을 직접 손으로 풀어본다.

3. 어떤 방식이 동작할 것 같으면 두 가지 속성을 증명해 본다.
3-a) 탐욕적 선택 속성
항상 각 단계에서 우리가 선택한 답을 포함하는 최적해가 존재함을 보이면 된다.
보통 우리가 선택한 답과 다른 최적해가 존재함을 가정하고,
이것을 조작해 우리가 선택한 답을 포함하는 최적해로 바꿀 수 있음을 보인다.
3-b) 최적 부분 구조
각 단계에서 항상 최적의 선택만을 했을 때 전체 최적해를 구할 수 있는지 여부 증명
보통 이 경우는 자명하게 알 수 있다.
